// DO NOT EDIT.

package tmpl

import "text/template"

var layout = "-- @@.ImportPath@@/Makefile --\n.PHONY: build\n\nbuild:\n\tdocker-compose -f deployments/docker-compose.yml build --no-cache\nup:\n\tdocker-compose -f deployments/docker-compose.yml up api\nup_db:\n\tdocker-compose -f deployments/docker-compose.yml up -d db\nrun_api:\n\tdocker-compose -f deployments/docker-compose.yml run api ash\nrun_db:\n\tdocker-compose -f deployments/docker-compose.yml run db ash\n-- @@.ImportPath@@/README.md --\n# QUIC START\n\n- this app was made by github.com/gari8/sprinter\n-- @@.ImportPath@@/build/Dockerfile --\nFROM golang:alpine\n\nENV GO113MODULE=on\n\nWORKDIR /app\n\nCOPY .. .\n\nRUN go mod tidy\n\nRUN apk update && apk add --no-cache git && go get github.com/cespare/reflex\n-- @@.ImportPath@@/cmd/main.go --\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"nice\")\n}\n-- @@.ImportPath@@/deployments/docker-compose.yml --\nversion: \"3.8\"\nservices:\n  api:\n    container_name: api\n    build:\n      context: ../\n      dockerfile: ./build/Dockerfile\n    tty: true\n    restart: always\n    volumes:\n      - ..:/app\n    ports:\n      - 8080:8080\n    environment:\n      PORT: 8080\n      DRIVER: \"postgres\"\n      DATABASE_URL: \"host=db user=postgres dbname=postgres password=postgres sslmode=disable\"\n    command: sh scripts/build-local.sh\n  db:\n    image: postgres:10-alpine\n    container_name: db\n    ports:\n      - 5432:5432\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      PGPASSWORD: postgres\n      POSTGRES_DB: postgres\n      DATABASE_HOST: localhost\n      TZ: 'Asia/Tokyo'\n    command: postgres -c log_destination=stderr -c log_statement=all -c log_connections=on -c log_disconnections=on\n    logging:\n      options:\n        max-size: \"10k\"\n        max-file: \"5\"\n    volumes:\n      - ./internal/@@.ImportPath@@/infrastructure/database/init:/docker-entrypoint-initdb.d\n  \n-- @@.ImportPath@@/go.mod --\nmodule server\n\ngo 1.16\n\nrequire (\n\tgithub.com/go-chi/chi v1.5.4\n\tgithub.com/lib/pq v1.10.2\n)\n-- @@.ImportPath@@/go.sum --\ngithub.com/go-chi/chi v1.5.4 h1:QHdzF2szwjqVV4wmByUnTcsbIg7UGaQ0tPF2t5GcAIs=\ngithub.com/go-chi/chi v1.5.4/go.mod h1:uaf8YgoFazUOkPBG7fxPftUylNumIev9awIWOENIuEg=\ngithub.com/lib/pq v1.10.2 h1:AqzbZs4ZoCBp+GtejcpCpcxM3zlSMx29dXbUSeVtJb8=\ngithub.com/lib/pq v1.10.2/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\n-- @@.ImportPath@@/scripts/build-local.sh --\n#!/bin/bash\n\ngo mod tidy\nreflex -r '(\\.go$|go\\.mod)' -s go run cmd/main.go\n"
var OnionTmpl = template.Must(template.New("tmpl").Delims(`@@`, `@@`).Parse(layout+"-- README.md --\n# QUIC START\n\n- this app was made by github.com/gari8/sprinter\n-- docker-compose.yml --\nversion: \"3.5\"\nservices:\n  @@.ImportPath@@api:\n    container_name: @@.ImportPath@@api\n    build: server\n    tty: true\n    restart: always\n    volumes:\n      - ./server/:/app\n    depends_on:\n      - @@.ImportPath@@db\n    ports:\n      - 8080:8080\n    environment:\n      PORT: 8080\n      @@ if .DataBase -@@\n      DRIVER: \"mysql\"\n      DATABASE_URL: \"mysql:mysql@tcp(@@.ImportPath@@db:3306)/mysql?charset=utf8&parseTime=true\"\n      @@ else @@\n      DRIVER: \"postgres\"\n      DATABASE_URL: \"host=@@.ImportPath@@db user=postgres dbname=postgres password=postgres sslmode=disable\"\n      @@ end @@\n    command: sh ./build.sh\n  @@ if .DataBase -@@\n  @@.ImportPath@@db:\n    image: mysql:8.0.21\n    container_name: @@.ImportPath@@db\n    environment:\n      MYSQL_ROOT_PASSWORD: mysql\n      MYSQL_DATABASE: mysql\n      MYSQL_USER: mysql\n      MYSQL_PASSWORD: mysql\n      TZ: 'Asia/Tokyo'\n    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n    volumes:\n      - ./server/infrastructure/database/init:/docker-entrypoint-initdb.d\n    ports:\n      - 3306:3306\n  @@ else @@\n  @@.ImportPath@@db:\n    image: postgres:10-alpine\n    container_name: @@.ImportPath@@db\n    ports:\n      - 5432:5432\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      PGPASSWORD: postgres\n      POSTGRES_DB: postgres\n      DATABASE_HOST: localhost\n    command: postgres -c log_destination=stderr -c log_statement=all -c log_connections=on -c log_disconnections=on\n    logging:\n      options:\n        max-size: \"10k\"\n        max-file: \"5\"\n    volumes:\n      - ./server/infrastructure/database/init:/docker-entrypoint-initdb.d\n  @@ end @@\n-- server/Dockerfile --\nFROM golang:alpine\n\nENV GO111MODULE=on\n\nWORKDIR /app\nCOPY . .\n\nRUN go mod tidy\n\nRUN apk add --no-cache git && go get github.com/cespare/reflex\n-- server/application/README.md --\n### Application layer\n\n### OverView\n\n- this layer is like UseCase . This layer receives information from the repository layer.\n\n### How to use\n\n#### Create Application Handler\n\n- At first: Create a function that belongs to a structure\n```\nex...\n\nfunc (e *exampleApplication) GetExample() (*model.Example, error) {\n    // abridgement\n}\n```\n\n- And then: Fill the interface\n```\nex...\n\ntype ExampleApplication interface {\n    GetExample() (*model.Example, error) // additional codes\n}\n```\n-- server/application/sample_application.go --\npackage application\n\nimport (\n\t\"server/domain/model\"\n\t\"server/domain/repository\"\n)\n\ntype (\n\tsampleApplication struct {\n\t\trepository.SampleRepository\n\t}\n\tSampleApplication interface {\n\t\tGetSamples() ([]*model.Sample, error)\n\t}\n)\n\nfunc NewSampleApplication(rs repository.SampleRepository) SampleApplication {\n\treturn &sampleApplication{rs}\n}\n\nfunc (s *sampleApplication) GetSamples() ([]*model.Sample, error) {\n\treturn s.SampleRepository.Fetch()\n}\n-- server/build.sh --\n#!/bin/bash\n\ngo mod tidy\nreflex -r '(\\.go$|go\\.mod)' -s go run main.go\n-- server/domain/model/sample_model.go --\npackage model\n\ntype Sample struct {\n\tID int64\n\tText string\n}\n-- server/domain/repository/README.md --\n### Application layer\n\n### OverView\n\n- this layer is like UseCase . This layer receives information from the repository layer.\n\n### How to use\n\n#### Create Repository Handler\n\n- At first: Create a function that belongs to a structure\n```\nex...\n\nfunc (e *exampleRepository) Fetch() (*model.Example, error) {\n    // abridgement\n}\n```\n\n- And then: Fill the interface\n```\nex...\n\ntype ExampleRepository interface {\n    Fetch() (*model.Example, error) // additional codes\n}\n```\n-- server/domain/repository/sample_repository.go --\npackage repository\n\nimport (\n\t\"database/sql\"\n\t\"server/domain/model\"\n)\n\ntype (\n\tsampleRepository struct{\n\t\tconn *sql.DB\n\t}\n\tSampleRepository interface {\n\t\tFetch() ([]*model.Sample, error)\n\t}\n)\n\nfunc NewSampleRepository(Conn *sql.DB) SampleRepository {\n\treturn &sampleRepository{Conn}\n}\n\nfunc (s *sampleRepository) Fetch() ([]*model.Sample, error) {\n\tvar samples []*model.Sample\n\trows, err := s.conn.Query(\"SELECT id, text FROM samples;\")\n\tif rows == nil { return nil, err }\n\tfor rows.Next() {\n\t\tsample := &model.Sample{}\n\t\terr = rows.Scan(&sample.ID, &sample.Text)\n\t\tif err == nil {\n\t\t\tsamples = append(samples, sample)\n\t\t}\n\t}\n\treturn samples, err\n}\n-- server/go.mod --\nmodule server\n-- server/infrastructure/database/conf/database.go --\npackage conf\n\nimport (\n\t\"database/sql\"\n\t@@ if .DataBase -@@\n\t_ \"github.com/go-sql-driver/mysql\"\n\t@@ else @@\n\t_ \"github.com/lib/pq\"\n\t@@ end @@\n\t\"os\"\n)\n\nvar (\n\tsource = os.Getenv(\"DATABASE_URL\")\n\tdriver = os.Getenv(\"DRIVER\")\n)\n\nfunc NewDatabaseConnection() (*sql.DB, error) {\n\tconn, err := sql.Open(driver, source)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn conn, nil\n}\n\n-- server/infrastructure/database/init/1_init.sql --\n@@ if .DataBase -@@\nDROP TABLE IF EXISTS samples;\n\nCREATE TABLE IF NOT EXISTS samples\n(\n    id SERIAL NOT NULL,\n    text VARCHAR(255) NOT NULL,\n    PRIMARY KEY (id)\n    );\n\nINSERT INTO samples(text) VALUES ('sample');\n@@ else @@\nDROP TABLE IF EXISTS samples;\n\nCREATE TABLE IF NOT EXISTS samples\n(\n   id SERIAL NOT NULL,\n   text TEXT NOT NULL,\n   PRIMARY KEY (id)\n);\n\nINSERT INTO samples(text) VALUES ('sample');\n@@ end @@\n-- server/interactor/README.md --\n### OverView\n\n- This file is a DI(Dependency Injection) container\n\n- It has each layer of Repository, Application, and Presenter as a structure.\nEach structure is initialized in the NewXXX method of that structure.\n\n### How to use\n\n- When adding a new model structure\n\n```\nex... \n// When example is added to model\ntype Example struct {\n    Name string\n}\n```\n\nadd example_repository.go in /domain/repository/ \n\n```\n// example_repository.go\npackage repository\n\nimport (\n\t\"database/sql\"\n\t\"$YourProjectName/domain/model\"\n)\n\ntype (\n\texampleRepository struct{\n\t\tconn *sql.DB\n\t}\n\tExampleRepository interface {\n\t\tFetch() ([]*model.Example, error)\n\t}\n)\n\nfunc NewExampleRepository(Conn *sql.DB) ExampleRepository {\n\treturn &exampleRepository{Conn}\n}\n\nfunc (s *exampleRepository) Fetch() ([]*model.Example, error) {\n    // TODO\n}\n```\n\nadd example_application.go in /application/\n\n```\npackage application\n\nimport (\n\t\"$YourProjectName/domain/model\"\n\t\"$YourProjectName/domain/repository\"\n)\n\ntype (\n\texampleApplication struct {\n\t\trepository.ExampleRepository\n\t}\n\tExampleApplication interface {\n\t\tGetExamples() ([]*model.Example, error)\n\t}\n)\n\nfunc NewExampleApplication(rs repository.ExampleRepository) ExampleApplication {\n\treturn &exampleApplication{rs}\n}\n\nfunc (s *exampleApplication) GetExamples() ([]*model.Example, error) {\n\treturn s.ExampleRepository.Fetch()\n}\n```\n\nadd example_handler.go in /presenter/handler/\n\n```\npackage handler\n\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"net/http\"\n\t\"$YourProjectName/application\"\n\t\"$YourProjectName/domain/model\"\n)\n\ntype(\n\texampleHandler struct {\n\t\tapplication.ExampleApplication\n\t}\n\tExampleHandler interface {\n\t\tExampleIndex(w http.ResponseWriter, r *http.Request)\n\t}\n\tresponse struct {\n\t\tStatus int\n\t\tExamples []*model.Example\n\t}\n)\n\nfunc NewExampleHandler(as application.ExampleApplication) ExampleHandler {\n\treturn &exampleHandler{as}\n}\n\nfunc (s *exampleHandler) ExampleIndex(w http.ResponseWriter, r *http.Request) {\n    // TODO\n}\n```\n\nwrite additional interfaces in interactor.go\n\n```\nex...\n\ntype Repository struct {\n\trepository.SampleRepository\n    repository.ExampleRepository // additional codes\n}\n\n...\n\nfunc (i *interactor) NewRepository() *Repository {\n\tr := &Repository{}\n\tr.SampleRepository = repository.NewSampleRepository(i.conn)\n\tr.ExampleRepository = repository.NewExampleRepository(i.conn)\n\treturn r\n}\n\n...\n\n```\n-- server/interactor/interactor.go --\npackage interactor\n\nimport (\n\t\"database/sql\"\n\t\"server/application\"\n\t\"server/domain/repository\"\n\t\"server/presenter/handler\"\n)\n\ntype (\n\tinteractor struct {\n\t\tconn *sql.DB\n\t}\n\tInteractor interface {\n\t\tNewRepository() *Repository\n\t\tNewApplication(r *Repository) *Application\n\t\tNewHandler(a *Application) *Handler\n\t}\n\tRepository struct {\n\t\trepository.SampleRepository\n\t}\n\tApplication struct {\n\t\tapplication.SampleApplication\n\t}\n\tHandler struct {\n\t\thandler.SampleHandler\n\t}\n)\n\nfunc NewInteractor(conn *sql.DB) Interactor {\n\treturn &interactor{conn}\n}\n\nfunc (i *interactor) NewRepository() *Repository {\n\tr := &Repository{}\n\tr.SampleRepository = repository.NewSampleRepository(i.conn)\n\treturn r\n}\n\nfunc (i *interactor) NewApplication(r *Repository) *Application {\n\ta := &Application{}\n\ta.SampleApplication = application.NewSampleApplication(r.SampleRepository)\n\treturn a\n}\n\nfunc (i *interactor) NewHandler(a *Application) *Handler {\n\th := &Handler{}\n\th.SampleHandler = handler.NewSampleHandler(a.SampleApplication)\n\treturn h\n}\n\n\n\n\n\n-- server/main.go --\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"server/infrastructure/database/conf\"\n\t\"server/interactor\"\n\t\"server/presenter/middleware\"\n\t\"server/presenter/router\"\n)\n\nconst defaultPort = \"8080\"\n\nfunc main() {\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = defaultPort\n\t}\n\n\tconn, err := conf.NewDatabaseConnection()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif conn == nil {\n\t\tpanic(err)\n\t}\n\tdefer func() {\n\t\tif conn != nil {\n\t\t\tif err := conn.Close(); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}\n\t}()\n\n\tfmt.Println(`\n    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n  *        ####    #####    #####     ####    ##  ##   ######   ######   #####  *\n  *      ##  ##   ##  ##   ##  ##     ##     ### ##     ##     ##       ##  ##  *\n  *     ##       ##  ##   ##  ##     ##     ######     ##     ##       ##  ##   *\n  *     ####    #####    #####      ##     ######     ##     ####     #####     *\n  *       ##   ##       ####       ##     ## ###     ##     ##       ####       *\n  *  ##  ##   ##       ## ##      ##     ##  ##     ##     ##       ## ##       *\n  *  ####    ##       ##  ##    ####    ##  ##     ##     ######   ##  ##       *\n    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n\tHTML:\tGET http://localhost:8080\n    API:\tGET http://localhost:8080/api/v1\n    `)\n\n\ti := interactor.NewInteractor(conn)\n\tr := i.NewRepository()\n\ta := i.NewApplication(r)\n\th := i.NewHandler(a)\n\tm := middleware.NewMiddleware()\n\ts := router.NewRouter()\n\ts.Router(h, m)\n\n\t_ = http.ListenAndServe(\":\"+port, s.Route)\n}\n-- server/presenter/handler/README.md --\n### Presenter layer\n\n### OverView\n\n- This layer receives information from the application layer.\n\n### How to use\n\n#### Create Presenter Handler\n\n- At first: Create a function that belongs to a structure\n```\nex...\n\nfunc (e *exampleHandler) ExampleIndex() (*model.Example, error) {\n    // abridgement\n}\n```\n\n- And then: Fill the interface\n```\nex...\n\ntype ExampleHandler interface {\n    ExampleIndex() (*model.Example, error) // additional codes\n}\n```\n-- server/presenter/handler/handler_util.go --\npackage handler\n\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\ntype response struct {\n\tStatus int\n\tResult interface{}\n}\n\nfunc parseTemplate(dir string, fileName string) (*template.Template, error) {\n\ttmpl := template.New(\"\")\n\n\tvar layout string\n\n\tif err := filepath.Walk(\"presenter/tmpl/layout\", func(path string, info os.FileInfo, err error) error {\n\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif !info.IsDir() && (strings.HasSuffix(path, \".html\") || strings.HasSuffix(path, \".js\")) {\n\t\t\tfile, err := ioutil.ReadFile(path)\n\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tlayout += string(file)\n\t\t}\n\n\t\treturn nil\n\t}); err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tif err := filepath.Walk(\"presenter/tmpl/\" + dir, func(path string, info os.FileInfo, err error) error {\n\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif !info.IsDir() && (strings.HasSuffix(path, \".html\") || strings.HasSuffix(path, \".js\")) {\n\t\t\tfile, err := ioutil.ReadFile(path)\n\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tfilename := strings.Replace(path, \"presenter/tmpl/\" + dir, \"\", -1)\n\n\n\t\t\tif strings.Contains(filename, fileName) {\n\t\t\t\ttmpl = tmpl.New(filename)\n\n\t\t\t\ttmpl, err = tmpl.Parse(string(file) + layout)\n\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn nil\n\t}); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn tmpl, nil\n}\n\n-- server/presenter/handler/sample_handler.go --\npackage handler\n\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"net/http\"\n\t\"server/application\"\n)\n\ntype(\n\tsampleHandler struct {\n\t\tapplication.SampleApplication\n\t}\n\tSampleHandler interface {\n\t\tSampleIndex(w http.ResponseWriter, r *http.Request)\n\t\tSampleHTML(w http.ResponseWriter, r *http.Request)\n\t}\n)\n\nfunc NewSampleHandler(as application.SampleApplication) SampleHandler {\n\treturn &sampleHandler{as}\n}\n\nfunc (s *sampleHandler) SampleIndex(w http.ResponseWriter, r *http.Request) {\n\tsamples, err := s.SampleApplication.GetSamples()\n\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusNotFound)\n\t}\n\n\tresp := &response{\n\t\tStatus: http.StatusOK,\n\t\tResult: samples,\n\t}\n\n\tres, err := json.Marshal(resp)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t_ , _ = w.Write(res)\n}\n\nfunc (s *sampleHandler) SampleHTML(w http.ResponseWriter, r *http.Request) {\n\ttmpl, err := parseTemplate(\"sample\", \"index\")\n\n\tif err != nil {\n\t\tlog.Fatal(\"err :\", err)\n\t}\n\n\tif err := tmpl.Execute(w, nil); err != nil {\n\t\tlog.Printf(\"failed to execute tmpl: %v\", err)\n\t}\n}\n-- server/presenter/middleware/main.go --\npackage middleware\n\ntype middleware struct {}\n\ntype Middleware interface {}\n\nfunc NewMiddleware() Middleware {\n\treturn &middleware{}\n}\n-- server/presenter/router/router.go --\npackage router\n\nimport (\n\t\"github.com/go-chi/chi\"\n\t\"github.com/go-chi/chi/middleware\"\n\t\"server/interactor\"\n\tmid \"server/presenter/middleware\"\n)\n\ntype Server struct {\n\tRoute *chi.Mux\n}\n\nfunc NewRouter() *Server {\n\treturn &Server{\n\t\tRoute: chi.NewRouter(),\n\t}\n}\n\nfunc (s *Server) Router(h *interactor.Handler, m mid.Middleware) {\n\ts.Route.Use(middleware.Logger)\n\ts.Route.Use(middleware.Recoverer)\n\ts.Route.Route(\"/\", func(r chi.Router) {\n\t\tr.Get(\"/\", h.SampleHandler.SampleHTML)\n\t})\n\ts.Route.Route(\"/api/v1\", func(r chi.Router) {\n\t\tr.Get(\"/\", h.SampleHandler.SampleIndex)\n\t\t// TODO\n\t})\n}\n-- server/presenter/router/router_test.go --\npackage router_test\n\nimport (\n\t\"github.com/go-chi/chi\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"reflect\"\n\t\"server/presenter/router\"\n\t\"testing\"\n)\n\nfunc TestNewRouter(t *testing.T) {\n\troute := chi.NewRouter()\n\twantNewRouterForm := &router.Server{\n\t\tRoute: route,\n\t}\n\n\tr := router.NewRouter()\n\n\tv := reflect.ValueOf(r)\n\tw := reflect.ValueOf(wantNewRouterForm)\n\n\tassert.Equal(t, v.Type(), w.Type())\n}\n-- server/presenter/template/layout/_footer.html --\n{{ define \"footer\" }}\n    <footer>sample</footer>\n    </body>\n    </html>\n{{ end }}\n-- server/presenter/template/layout/_header.html --\n{{ define \"header\" }}\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Sample</title>\n        <style>\n            * {\n                margin: 0;\n                padding: 0;\n                box-sizing: border-box;\n            }\n        </style>\n    </head>\n    <body>\n    <header><a href=\"/\">sample</a></header>\n{{ end }}\n-- server/presenter/template/sample/index.html --\n{{ template \"header\" }}\n<h1><i>SPRINTER</i></h1>\n{{ template \"footer\" }}\n"))
var MVCTmpl = template.Must(template.New("tmpl").Delims(`@@`, `@@`).Parse(layout+"-- README.md --\n# QUIC START\n\n- this app was made by github.com/hagarihayato/sprinter\n-- docker-compose.yml --\nversion: \"3.5\"\nservices:\n  @@.ImportPath@@api:\n      container_name: @@.ImportPath@@api\n      build: server\n      tty: true\n      restart: always\n      volumes:\n        - ./server/:/app\n      depends_on:\n        - @@.ImportPath@@db\n      ports:\n        - 8080:8080\n      environment:\n        PORT: 8080\n        @@ if .DataBase -@@\n        DRIVER: \"mysql\"\n        DATABASE_URL: \"mysql:mysql@tcp(@@.ImportPath@@db:3306)/mysql?charset=utf8&parseTime=true\"\n        @@ else @@\n        DRIVER: \"postgres\"\n        DATABASE_URL: \"host=@@.ImportPath@@db user=postgres dbname=postgres password=postgres sslmode=disable\"\n        @@ end @@\n      command: sh ./build.sh\n  @@ if .DataBase -@@\n  @@.ImportPath@@db:\n      image: mysql:8.0.21\n      container_name: @@.ImportPath@@db\n      environment:\n        MYSQL_ROOT_PASSWORD: mysql\n        MYSQL_DATABASE: mysql\n        MYSQL_USER: mysql\n        MYSQL_PASSWORD: mysql\n        TZ: 'Asia/Tokyo'\n      command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\n      volumes:\n        - ./server/config/database/init:/docker-entrypoint-initdb.d\n      ports:\n        - 3306:3306\n  @@ else @@\n  @@.ImportPath@@db:\n      image: postgres:10-alpine\n      container_name: @@.ImportPath@@db\n      ports:\n        - 5432:5432\n      environment:\n        POSTGRES_USER: postgres\n        POSTGRES_PASSWORD: postgres\n        PGPASSWORD: postgres\n        POSTGRES_DB: postgres\n        DATABASE_HOST: localhost\n      command: postgres -c log_destination=stderr -c log_statement=all -c log_connections=on -c log_disconnections=on\n      logging:\n        options:\n          max-size: \"10k\"\n          max-file: \"5\"\n      volumes:\n        - ./server/config/database/init:/docker-entrypoint-initdb.d\n  @@ end @@\n-- server/Dockerfile --\nFROM golang:alpine\n\nENV GO111MODULE=on\n\nWORKDIR /app\nCOPY . .\n\nRUN go mod tidy\n\nRUN apk add --no-cache git && go get github.com/cespare/reflex\n-- server/build.sh --\n#!/bin/bash\n\ngo mod tidy\nreflex -r '(\\.go$|go\\.mod)' -s go run main.go\n-- server/config/database/conf/database.go --\npackage conf\n\nimport (\n\t\"database/sql\"\n\t@@ if .DataBase -@@\n\t_ \"github.com/go-sql-driver/mysql\"\n\t@@ else @@\n\t_ \"github.com/lib/pq\"\n\t@@ end @@\n\t\"os\"\n)\n\nvar (\n\tsource = os.Getenv(\"DATABASE_URL\")\n\tdriver = os.Getenv(\"DRIVER\")\n)\n\nfunc NewDatabaseConnection() (*sql.DB, error) {\n\tconn, err := sql.Open(driver, source)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn conn, nil\n}\n\n-- server/config/database/init/1_init.sql --\n@@ if .DataBase -@@\nDROP TABLE IF EXISTS samples;\n\nCREATE TABLE IF NOT EXISTS samples\n(\n    id SERIAL NOT NULL,\n    text VARCHAR(255) NOT NULL,\n    PRIMARY KEY (id)\n    );\n\nINSERT INTO samples(text) VALUES ('sample');\n@@ else @@\nDROP TABLE IF EXISTS samples;\n\nCREATE TABLE IF NOT EXISTS samples\n(\n   id SERIAL NOT NULL,\n   text TEXT NOT NULL,\n   PRIMARY KEY (id)\n);\n\nINSERT INTO samples(text) VALUES ('sample');\n@@ end @@\n-- server/controllers/controller_base.go --\npackage controllers\n\nimport \"server/models\"\n\ntype Controller struct {\n\tSampleController\n}\n\nfunc NewController(model *models.Model) *Controller {\n\tc := &Controller{}\n\tc.SampleController = NewSampleController(model)\n\treturn c\n}\n-- server/controllers/controller_util.go --\npackage controllers\n\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\ntype response struct {\n\tStatus int\n\tResult interface{}\n}\n\nfunc parseTemplate(dir string, fileName string) (*template.Template, error) {\n\ttmpl := template.New(\"\")\n\n\tvar layout string\n\n\tif err := filepath.Walk(\"views/layout\", func(path string, info os.FileInfo, err error) error {\n\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif !info.IsDir() && (strings.HasSuffix(path, \".html\") || strings.HasSuffix(path, \".js\")) {\n\t\t\tfile, err := ioutil.ReadFile(path)\n\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tlayout += string(file)\n\t\t}\n\n\t\treturn nil\n\t}); err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tif err := filepath.Walk(\"views/\" + dir, func(path string, info os.FileInfo, err error) error {\n\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif !info.IsDir() && (strings.HasSuffix(path, \".html\") || strings.HasSuffix(path, \".js\")) {\n\t\t\tfile, err := ioutil.ReadFile(path)\n\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tfilename := strings.Replace(path, \"views/\" + dir, \"\", -1)\n\n\n\t\t\tif strings.Contains(filename, fileName) {\n\t\t\t\ttmpl = tmpl.New(filename)\n\n\t\t\t\ttmpl, err = tmpl.Parse(string(file) + layout)\n\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn nil\n\t}); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn tmpl, nil\n}\n\n-- server/controllers/sample_controller.go --\npackage controllers\n\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"net/http\"\n\t\"server/models\"\n)\n\ntype sampleController struct {\n\tmodels.SampleModel\n}\n\ntype SampleController interface {\n\tSampleIndex(w http.ResponseWriter, r *http.Request)\n\tSampleHTML(w http.ResponseWriter, r *http.Request)\n}\n\nfunc NewSampleController(sm models.SampleModel) SampleController {\n\treturn &sampleController{sm}\n}\n\nfunc (s *sampleController) SampleIndex(w http.ResponseWriter, r *http.Request) {\n\tsamples, err := s.SampleModel.Fetch()\n\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusNotFound)\n\t}\n\n\tresp := &response{\n\t\tStatus: http.StatusOK,\n\t\tResult: samples,\n\t}\n\n\tres, err := json.Marshal(resp)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t_ , _ = w.Write(res)\n}\n\nfunc (s *sampleController) SampleHTML(w http.ResponseWriter, r *http.Request) {\n\ttmpl, err := parseTemplate(\"sample\", \"index\")\n\n\tif err != nil {\n\t\tlog.Fatal(\"err :\", err)\n\t}\n\n\tif err := tmpl.Execute(w, nil); err != nil {\n\t\tlog.Printf(\"failed to execute tmpl: %v\", err)\n\t}\n}\n\n-- server/go.mod --\nmodule server\n-- server/main.go --\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"server/config/database/conf\"\n\t\"server/controllers\"\n\t\"server/models\"\n\t\"server/router\"\n)\n\nconst defaultPort = \"8080\"\n\nfunc main() {\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = defaultPort\n\t}\n\n\tconn, err := conf.NewDatabaseConnection()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif conn == nil {\n\t\tpanic(err)\n\t}\n\tdefer func() {\n\t\tif conn != nil {\n\t\t\tif err := conn.Close(); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}\n\t}()\n\n\tfmt.Println(`\n    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n  *        ####    #####    #####     ####    ##  ##   ######   ######   #####  *\n  *      ##  ##   ##  ##   ##  ##     ##     ### ##     ##     ##       ##  ##  *\n  *     ##       ##  ##   ##  ##     ##     ######     ##     ##       ##  ##   *\n  *     ####    #####    #####      ##     ######     ##     ####     #####     *\n  *       ##   ##       ####       ##     ## ###     ##     ##       ####       *\n  *  ##  ##   ##       ## ##      ##     ##  ##     ##     ##       ## ##       *\n  *  ####    ##       ##  ##    ####    ##  ##     ##     ######   ##  ##       *\n    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n\tHTML:\tGET http://localhost:8080\n    API:\tGET http://localhost:8080/api/v1\n    `)\n\n\tm := models.NewModel(conn)\n\tc := controllers.NewController(m)\n\ts := router.NewRouter()\n\ts.Router(c)\n\n\t_ = http.ListenAndServe(\":\"+port, s.Route)\n}\n-- server/models/model_base.go --\npackage models\n\nimport \"database/sql\"\n\ntype Model struct {\n\tSampleModel\n}\n\nfunc NewModel(conn *sql.DB) *Model {\n\tm := &Model{}\n\tm.SampleModel = NewSampleModel(conn)\n\treturn m\n}\n-- server/models/sample_model.go --\npackage models\n\nimport \"database/sql\"\n\ntype sampleModel struct{\n\tconn *sql.DB\n}\n\ntype SampleModel interface {\n\tFetch() ([]*Sample, error)\n}\n\nfunc NewSampleModel(conn *sql.DB) SampleModel {\n\treturn &sampleModel{conn}\n}\n\ntype Sample struct {\n\tID   int64\n\tText string\n}\n\nfunc (s *sampleModel) Fetch() ([]*Sample, error) {\n\tvar samples []*Sample\n\trows, err := s.conn.Query(\"SELECT id, text FROM samples;\")\n\tif rows == nil {\n\t\treturn nil, err\n\t}\n\tfor rows.Next() {\n\t\tsample := &Sample{}\n\t\terr = rows.Scan(&sample.ID, &sample.Text)\n\t\tif err == nil {\n\t\t\tsamples = append(samples, sample)\n\t\t}\n\t}\n\treturn samples, err\n}\n-- server/router/router.go --\npackage router\n\nimport (\n\t\"github.com/go-chi/chi\"\n\t\"github.com/go-chi/chi/middleware\"\n\t\"server/controllers\"\n)\n\ntype Server struct {\n\tRoute *chi.Mux\n}\n\nfunc NewRouter() *Server {\n\treturn &Server{\n\t\tRoute: chi.NewRouter(),\n\t}\n}\n\n\nfunc (s *Server) Router(c *controllers.Controller) {\n\ts.Route.Use(middleware.Logger)\n\ts.Route.Use(middleware.Recoverer)\n\ts.Route.Route(\"/\", func(r chi.Router) {\n\t\tr.Get(\"/\", c.SampleController.SampleHTML)\n\t})\n\ts.Route.Route(\"/server/v1\", func(r chi.Router) {\n\t\tr.Get(\"/\",c.SampleController.SampleIndex)\n\t\t// TODO\n\t})\n}\n-- server/router/router_test.go --\npackage router_test\n\nimport (\n\t\"github.com/go-chi/chi\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"reflect\"\n\t\"server/router\"\n\t\"testing\"\n)\n\nfunc TestNewRouter(t *testing.T) {\n\troute := chi.NewRouter()\n\twantNewRouterForm := &router.Server{\n\t\tRoute: route,\n\t}\n\n\tr := router.NewRouter()\n\n\tv := reflect.ValueOf(r)\n\tw := reflect.ValueOf(wantNewRouterForm)\n\n\tassert.Equal(t, v.Type(), w.Type())\n}\n-- server/views/layout/_footer.html --\n{{ define \"footer\" }}\n    <footer>sample</footer>\n    </body>\n    </html>\n{{ end }}\n-- server/views/layout/_header.html --\n{{ define \"header\" }}\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Sample</title>\n        <style>\n            * {\n                margin: 0;\n                padding: 0;\n                box-sizing: border-box;\n            }\n        </style>\n    </head>\n    <body>\n    <header><a href=\"/\">sample</a></header>\n{{ end }}\n-- server/views/sample/index.html --\n{{ template \"header\" }}\n<h1><i>SPRINTER</i></h1>\n{{ template \"footer\" }}\n"))
var MinimumTmpl = template.Must(template.New("tmpl").Delims(`@@`, `@@`).Parse(layout+""))
var CleanTmpl = template.Must(template.New("tmpl").Delims(`@@`, `@@`).Parse(layout+""))
